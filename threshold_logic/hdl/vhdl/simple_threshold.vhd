-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple_threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    top_bid_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    top_bid_TVALID : IN STD_LOGIC;
    top_bid_TREADY : OUT STD_LOGIC;
    top_ask_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    top_ask_TVALID : IN STD_LOGIC;
    top_ask_TREADY : OUT STD_LOGIC;
    incoming_time_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    incoming_time_TVALID : IN STD_LOGIC;
    incoming_time_TREADY : OUT STD_LOGIC;
    incoming_meta_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    incoming_meta_TVALID : IN STD_LOGIC;
    incoming_meta_TREADY : OUT STD_LOGIC;
    outgoing_order_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    outgoing_order_TVALID : OUT STD_LOGIC;
    outgoing_order_TREADY : IN STD_LOGIC;
    outgoing_time_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outgoing_time_TVALID : OUT STD_LOGIC;
    outgoing_time_TREADY : IN STD_LOGIC;
    outgoing_meta_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    outgoing_meta_TVALID : OUT STD_LOGIC;
    outgoing_meta_TREADY : IN STD_LOGIC );
end;


architecture behav of simple_threshold is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simple_threshold_simple_threshold,hls_ip_2023_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku5p-ffvb676-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.192400,HLS_SYN_LAT=130,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4466,HLS_SYN_LUT=4811,HLS_VERSION=2023_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (154 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (154 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (154 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (154 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (154 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (154 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (154 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (154 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (154 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (154 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (154 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (154 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_A : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_42C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110010000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_40A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101000000000000000000000";
    constant ap_const_lv32_41600000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001011000000000000000000000";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_41A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001101000000000000000000000";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_3D4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101010011001100110011001101";
    constant ap_const_lv32_42480000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010010010000000000000000000";
    constant ap_const_lv49_1D272CB : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001110100100111001011001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_119 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100011001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_7B : STD_LOGIC_VECTOR (7 downto 0) := "01111011";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal cooldownTimer : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001010";
    signal updateCounter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_shortTermPrices : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_shortTermPrices_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_shortTermPrices_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_shortTermPrices_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_shortTermPrices_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateMovingAverages_float_float_float_int_longTermPrices_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal updateRSI_float_float_int_priceChanges_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ9updateRSIfRfRiE12priceChanges_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ9updateRSIfRfRiE12priceChanges_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ9updateRSIfRfRiE12priceChanges_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ9updateRSIfRfRiE12priceChanges_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal top_bid_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (154 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal top_ask_TDATA_blk_n : STD_LOGIC;
    signal incoming_time_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal icmp_ln166_fu_1938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal incoming_meta_TDATA_blk_n : STD_LOGIC;
    signal outgoing_order_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state155 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state155 : signal is "none";
    signal tmp_reg_2004 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln151_reg_2011 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln164_reg_2338 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_2372 : STD_LOGIC_VECTOR (0 downto 0);
    signal outgoing_time_TDATA_blk_n : STD_LOGIC;
    signal outgoing_meta_TDATA_blk_n : STD_LOGIC;
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal tmp_nbreadreq_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal and_ln151_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_2018 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln45_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln45_reg_2025 : STD_LOGIC_VECTOR (31 downto 0);
    signal bid_price_fu_618_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bid_price_reg_2032 : STD_LOGIC_VECTOR (15 downto 0);
    signal bid_size_reg_2037 : STD_LOGIC_VECTOR (7 downto 0);
    signal ask_price_fu_632_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ask_price_reg_2042 : STD_LOGIC_VECTOR (15 downto 0);
    signal ask_size_reg_2047 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_2052 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln156_2_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln156_2_reg_2060 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal updateMovingAverages_float_float_float_int_longTermPrices_load_reg_2121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal updateMovingAverages_float_float_float_int_longTermPrices_5_load_reg_2126 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_6_load_reg_2131 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_7_load_reg_2136 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_8_load_reg_2141 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_9_load_reg_2146 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_10_load_reg_2151 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_11_load_reg_2156 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_12_load_reg_2161 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_13_load_reg_2166 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load_reg_2171 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_reg_2176 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_35_reg_2181 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_36_reg_2186 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_37_reg_2191 : STD_LOGIC_VECTOR (31 downto 0);
    signal updateMovingAverages_float_float_float_int_longTermPrices_38_reg_2196 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load_reg_2201 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load_reg_2206 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load_reg_2211 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load_reg_2216 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln70_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2221 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln72_fu_1298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln72_reg_2232 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal previousPrice_fu_1425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal previousPrice_reg_2236 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln161_fu_1573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln161_reg_2241 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal bitcast_ln75_fu_1579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln75_reg_2247 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal and_ln75_fu_1615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_reg_2252 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_2258 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_2263 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_i7_reg_2268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal gain_1_fu_1630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal gain_1_reg_2273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal loss_1_fu_1637_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal loss_1_reg_2278 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln479_fu_1648_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln479_reg_2283 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_i_reg_2288 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal icmp_ln83_fu_1682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_reg_2298 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal icmp_ln83_1_fu_1688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_1_reg_2303 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal rs_fu_1703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_i8_reg_2318 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal icmp_ln164_fu_1730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_2328 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_1_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_1_reg_2333 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln164_fu_1746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal or_ln161_2_fu_1782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln161_2_reg_2342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal isUptrend_fu_1797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isUptrend_reg_2348 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal and_ln162_3_fu_1824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln162_3_reg_2354 : STD_LOGIC_VECTOR (0 downto 0);
    signal tradeOrder_size_3_fu_1837_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tradeOrder_size_3_reg_2361 : STD_LOGIC_VECTOR (7 downto 0);
    signal tradeOrder_direction_fu_1850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tradeOrder_direction_reg_2367 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_done : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_idle : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_ready : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_shortSum_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_shortSum_out_ap_vld : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_ce : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_done : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_idle : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_ready : STD_LOGIC;
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_longSum_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_longSum_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_cooldownTimer_flag_3_phi_fu_417_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cooldownTimer_flag_3_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op692_write_state155 : BOOLEAN;
    signal ap_predicate_op693_write_state155 : BOOLEAN;
    signal ap_predicate_op694_write_state155 : BOOLEAN;
    signal regslice_both_outgoing_order_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outgoing_time_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outgoing_meta_U_apdone_blk : STD_LOGIC;
    signal ap_block_state155 : BOOLEAN;
    signal ap_block_state155_io : BOOLEAN;
    signal ap_block_state154 : BOOLEAN;
    signal ap_block_state154_io : BOOLEAN;
    signal ap_phi_mux_empty_phi_fu_438_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_434 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start_reg : STD_LOGIC := '0';
    signal select_ln178_fu_1978_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln178_fu_1972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln58_fu_1258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_fu_974_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln46_fu_1026_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_5_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_6_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_7_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_8_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_9_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_10_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_11_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_12_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_13_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_35 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_36 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_37 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_38 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal tmp_1_nbreadreq_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state35 : BOOLEAN;
    signal grp_fu_488_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal grp_fu_495_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal grp_fu_500_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_522_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_534_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln109_fu_538_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln109_fu_538_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln151_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_1_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln156_1_fu_650_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln156_fu_646_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln156_fu_654_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln156_2_fu_670_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_678_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_688_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln156_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln156_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln156_1_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_724_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln156_1_fu_740_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln156_3_fu_744_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln156_8_fu_750_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln156_1_fu_754_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln156_2_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln156_2_fu_764_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln156_1_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln156_2_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_781_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln156_3_fu_795_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal bit_select30_i_i1_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln156_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln156_1_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln156_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln156_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln156_2_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln156_3_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_4_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln156_1_fu_852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln156_5_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln156_3_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln156_fu_846_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln156_fu_862_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_819_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln156_fu_868_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_6_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln156_3_fu_880_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln156_2_fu_886_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_13_fu_900_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln156_fu_708_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln156_2_fu_916_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln156_1_fu_908_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln156_4_fu_922_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln156_7_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_928_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pi_assign_fu_936_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln156_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln766_fu_952_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln45_fu_964_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln45_fu_968_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1011_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1011_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln46_fu_1016_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln46_fu_1020_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1275_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1275_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln72_fu_1288_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln72_fu_1292_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1361_p30 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p31 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln161_fu_1501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln161_1_fu_1519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln161_fu_1515_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln161_1_fu_1543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1523_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln161_1_fu_1533_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln161_3_fu_1561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_2_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln161_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln161_1_fu_1567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1583_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_fu_1593_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln75_1_fu_1603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_1597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_fu_1609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_1621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loss_fu_1626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_fu_1644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_1652_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln83_fu_1664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1668_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_fu_1678_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln83_fu_1694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln83_fu_1698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln164_fu_1712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1716_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln164_fu_1726_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln164_fu_1742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln161_2_fu_1752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_1756_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln161_2_fu_1766_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln161_5_fu_1776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_4_fu_1770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln161_1_fu_1788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln161_2_fu_1792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln162_1_fu_1807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln161_fu_1812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln162_2_fu_1818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln162_fu_1803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tradeOrder_size_2_fu_1830_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln162_4_fu_1844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln104_fu_1859_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln104_fu_1859_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln104_fu_1859_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_1875_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln109_fu_538_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tradeOrder_price_fu_1865_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tradeOrder_price_1_fu_1887_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tradeOrder_price_2_fu_1897_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln162_fu_1918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_fu_1911_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tradeOrder_orderID_fu_1922_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln162_fu_1930_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln162_fu_1934_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tradeOrder_price_3_fu_1904_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1943_p6 : STD_LOGIC_VECTOR (64 downto 0);
    signal icmp_ln178_fu_1960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln179_fu_1966_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_488_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_488_ce : STD_LOGIC;
    signal grp_fu_517_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_522_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_612_ap_start : STD_LOGIC;
    signal grp_fu_612_ap_done : STD_LOGIC;
    signal grp_fu_612_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_1011_ap_start : STD_LOGIC;
    signal grp_fu_1011_ap_done : STD_LOGIC;
    signal grp_fu_1275_ap_start : STD_LOGIC;
    signal grp_fu_1275_ap_done : STD_LOGIC;
    signal grp_fu_1275_ce : STD_LOGIC;
    signal ap_block_state72_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (154 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ST_fsm_state153_blk : STD_LOGIC;
    signal ap_ST_fsm_state154_blk : STD_LOGIC;
    signal ap_ST_fsm_state155_blk : STD_LOGIC;
    signal regslice_both_top_bid_U_apdone_blk : STD_LOGIC;
    signal top_bid_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal top_bid_TVALID_int_regslice : STD_LOGIC;
    signal top_bid_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_top_bid_U_ack_in : STD_LOGIC;
    signal regslice_both_top_ask_U_apdone_blk : STD_LOGIC;
    signal top_ask_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal top_ask_TVALID_int_regslice : STD_LOGIC;
    signal top_ask_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_top_ask_U_ack_in : STD_LOGIC;
    signal regslice_both_incoming_time_U_apdone_blk : STD_LOGIC;
    signal incoming_time_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal incoming_time_TVALID_int_regslice : STD_LOGIC;
    signal incoming_time_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_incoming_time_U_ack_in : STD_LOGIC;
    signal regslice_both_incoming_meta_U_apdone_blk : STD_LOGIC;
    signal incoming_meta_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal incoming_meta_TVALID_int_regslice : STD_LOGIC;
    signal incoming_meta_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_incoming_meta_U_ack_in : STD_LOGIC;
    signal outgoing_order_TDATA_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal outgoing_order_TVALID_int_regslice : STD_LOGIC;
    signal outgoing_order_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outgoing_order_U_vld_out : STD_LOGIC;
    signal outgoing_time_TVALID_int_regslice : STD_LOGIC;
    signal outgoing_time_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outgoing_time_U_vld_out : STD_LOGIC;
    signal outgoing_meta_TVALID_int_regslice : STD_LOGIC;
    signal outgoing_meta_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outgoing_meta_U_vld_out : STD_LOGIC;
    signal mul_ln104_fu_1859_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln109_fu_538_p00 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_8_fu_1361_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_1361_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_49_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        updateMovingAverages_float_float_float_int_shortTermPrices_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_shortTermPrices_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_shortTermPrices_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_shortTermPrices_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_shortTermPrices_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
        shortSum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        shortSum_out_ap_vld : OUT STD_LOGIC;
        grp_fu_488_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_488_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_488_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_488_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_488_p_ce : OUT STD_LOGIC );
    end component;


    component simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_52_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        updateMovingAverages_float_float_float_int_longTermPrices_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_8_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_9_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_11_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_12_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_13_load : IN STD_LOGIC_VECTOR (31 downto 0);
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_6 : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_7 : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_8 : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices_9 : IN STD_LOGIC_VECTOR (31 downto 0);
        updateMovingAverages_float_float_float_int_longTermPrices : IN STD_LOGIC_VECTOR (31 downto 0);
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load : IN STD_LOGIC_VECTOR (31 downto 0);
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load : IN STD_LOGIC_VECTOR (31 downto 0);
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load : IN STD_LOGIC_VECTOR (31 downto 0);
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load : IN STD_LOGIC_VECTOR (31 downto 0);
        longSum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        longSum_out_ap_vld : OUT STD_LOGIC );
    end component;


    component simple_threshold_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simple_threshold_fdiv_32ns_32ns_32_9_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simple_threshold_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simple_threshold_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component simple_threshold_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component simple_threshold_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component simple_threshold_mul_24ns_26ns_49_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component simple_threshold_urem_32ns_4ns_3_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component simple_threshold_urem_32ns_6ns_5_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component simple_threshold_urem_32ns_5ns_4_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component simple_threshold_sparsemux_29_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simple_threshold_mul_16ns_10ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component simple_threshold_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453 : component simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_49_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start,
        ap_done => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_done,
        ap_idle => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_idle,
        ap_ready => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_ready,
        updateMovingAverages_float_float_float_int_shortTermPrices_load => updateMovingAverages_float_float_float_int_shortTermPrices,
        updateMovingAverages_float_float_float_int_shortTermPrices_1_load => updateMovingAverages_float_float_float_int_shortTermPrices_1,
        updateMovingAverages_float_float_float_int_shortTermPrices_2_load => updateMovingAverages_float_float_float_int_shortTermPrices_2,
        updateMovingAverages_float_float_float_int_shortTermPrices_3_load => updateMovingAverages_float_float_float_int_shortTermPrices_3,
        updateMovingAverages_float_float_float_int_shortTermPrices_4_load => updateMovingAverages_float_float_float_int_shortTermPrices_4,
        shortSum_out => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_shortSum_out,
        shortSum_out_ap_vld => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_shortSum_out_ap_vld,
        grp_fu_488_p_din0 => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din0,
        grp_fu_488_p_din1 => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din1,
        grp_fu_488_p_opcode => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_opcode,
        grp_fu_488_p_dout0 => grp_fu_488_p2,
        grp_fu_488_p_ce => grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_ce);

    grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463 : component simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_52_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start,
        ap_done => grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_done,
        ap_idle => grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_idle,
        ap_ready => grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_ready,
        updateMovingAverages_float_float_float_int_longTermPrices_load => updateMovingAverages_float_float_float_int_longTermPrices_load_reg_2121,
        updateMovingAverages_float_float_float_int_longTermPrices_5_load => updateMovingAverages_float_float_float_int_longTermPrices_5_load_reg_2126,
        updateMovingAverages_float_float_float_int_longTermPrices_6_load => updateMovingAverages_float_float_float_int_longTermPrices_6_load_reg_2131,
        updateMovingAverages_float_float_float_int_longTermPrices_7_load => updateMovingAverages_float_float_float_int_longTermPrices_7_load_reg_2136,
        updateMovingAverages_float_float_float_int_longTermPrices_8_load => updateMovingAverages_float_float_float_int_longTermPrices_8_load_reg_2141,
        updateMovingAverages_float_float_float_int_longTermPrices_9_load => updateMovingAverages_float_float_float_int_longTermPrices_9_load_reg_2146,
        updateMovingAverages_float_float_float_int_longTermPrices_10_load => updateMovingAverages_float_float_float_int_longTermPrices_10_load_reg_2151,
        updateMovingAverages_float_float_float_int_longTermPrices_11_load => updateMovingAverages_float_float_float_int_longTermPrices_11_load_reg_2156,
        updateMovingAverages_float_float_float_int_longTermPrices_12_load => updateMovingAverages_float_float_float_int_longTermPrices_12_load_reg_2161,
        updateMovingAverages_float_float_float_int_longTermPrices_13_load => updateMovingAverages_float_float_float_int_longTermPrices_13_load_reg_2166,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load_reg_2171,
        updateMovingAverages_float_float_float_int_longTermPrices_6 => updateMovingAverages_float_float_float_int_longTermPrices_reg_2176,
        updateMovingAverages_float_float_float_int_longTermPrices_7 => updateMovingAverages_float_float_float_int_longTermPrices_35_reg_2181,
        updateMovingAverages_float_float_float_int_longTermPrices_8 => updateMovingAverages_float_float_float_int_longTermPrices_36_reg_2186,
        updateMovingAverages_float_float_float_int_longTermPrices_9 => updateMovingAverages_float_float_float_int_longTermPrices_37_reg_2191,
        updateMovingAverages_float_float_float_int_longTermPrices => updateMovingAverages_float_float_float_int_longTermPrices_38_reg_2196,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load_reg_2201,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load_reg_2206,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load_reg_2211,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load_reg_2216,
        longSum_out => grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_longSum_out,
        longSum_out_ap_vld => grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_longSum_out_ap_vld);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U35 : component simple_threshold_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_488_p0,
        din1 => grp_fu_488_p1,
        opcode => grp_fu_488_opcode,
        ce => grp_fu_488_ce,
        dout => grp_fu_488_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U36 : component simple_threshold_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_495_p0,
        din1 => grp_fu_495_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p2);

    fdiv_32ns_32ns_32_9_no_dsp_1_U37 : component simple_threshold_fdiv_32ns_32ns_32_9_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_500_p0,
        din1 => grp_fu_500_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_500_p2);

    fptrunc_64ns_32_2_no_dsp_1_U38 : component simple_threshold_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => div_i8_reg_2318,
        ce => ap_const_logic_1,
        dout => grp_fu_508_p1);

    fpext_32ns_64_2_no_dsp_1_U39 : component simple_threshold_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sub_i7_reg_2268,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p1);

    fpext_32ns_64_2_no_dsp_1_U40 : component simple_threshold_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_552,
        ce => ap_const_logic_1,
        dout => grp_fu_514_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U41 : component simple_threshold_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_517_p0,
        din1 => grp_fu_517_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_517_opcode,
        dout => grp_fu_517_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U42 : component simple_threshold_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_522_p0,
        din1 => grp_fu_522_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_522_opcode,
        dout => grp_fu_522_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U43 : component simple_threshold_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_543,
        din1 => reg_552,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_526_p2);

    ddiv_64ns_64ns_64_22_no_dsp_1_U44 : component simple_threshold_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_534_p0,
        din1 => conv1_i_reg_2288,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    mul_24ns_26ns_49_1_1_U45 : component simple_threshold_mul_24ns_26ns_49_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 26,
        dout_WIDTH => 49)
    port map (
        din0 => mul_ln109_fu_538_p0,
        din1 => mul_ln109_fu_538_p1,
        dout => mul_ln109_fu_538_p2);

    urem_32ns_4ns_3_36_seq_1_U46 : component simple_threshold_urem_32ns_4ns_3_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_612_ap_start,
        done => grp_fu_612_ap_done,
        din0 => grp_fu_612_p0,
        din1 => grp_fu_612_p1,
        ce => grp_fu_612_ce,
        dout => grp_fu_612_p2);

    urem_32ns_6ns_5_36_seq_1_U47 : component simple_threshold_urem_32ns_6ns_5_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 6,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1011_ap_start,
        done => grp_fu_1011_ap_done,
        din0 => xor_ln45_reg_2025,
        din1 => grp_fu_1011_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1011_p2);

    urem_32ns_5ns_4_36_seq_1_U48 : component simple_threshold_urem_32ns_5ns_4_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 5,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1275_ap_start,
        done => grp_fu_1275_ap_done,
        din0 => xor_ln45_reg_2025,
        din1 => grp_fu_1275_p1,
        ce => grp_fu_1275_ce,
        dout => grp_fu_1275_p2);

    sparsemux_29_4_32_1_1_U49 : component simple_threshold_sparsemux_29_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0001",
        din1_WIDTH => 32,
        CASE2 => "0010",
        din2_WIDTH => 32,
        CASE3 => "0011",
        din3_WIDTH => 32,
        CASE4 => "0100",
        din4_WIDTH => 32,
        CASE5 => "0101",
        din5_WIDTH => 32,
        CASE6 => "0110",
        din6_WIDTH => 32,
        CASE7 => "0111",
        din7_WIDTH => 32,
        CASE8 => "1000",
        din8_WIDTH => 32,
        CASE9 => "1001",
        din9_WIDTH => 32,
        CASE10 => "1010",
        din10_WIDTH => 32,
        CASE11 => "1011",
        din11_WIDTH => 32,
        CASE12 => "1100",
        din12_WIDTH => 32,
        CASE13 => "1101",
        din13_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => updateRSI_float_float_int_priceChanges,
        din1 => updateRSI_float_float_int_priceChanges_14,
        din2 => updateRSI_float_float_int_priceChanges_15,
        din3 => updateRSI_float_float_int_priceChanges_16,
        din4 => updateRSI_float_float_int_priceChanges_17,
        din5 => updateRSI_float_float_int_priceChanges_18,
        din6 => updateRSI_float_float_int_priceChanges_19,
        din7 => updateRSI_float_float_int_priceChanges_20,
        din8 => updateRSI_float_float_int_priceChanges_21,
        din9 => updateRSI_float_float_int_priceChanges_22,
        din10 => p_ZZ9updateRSIfRfRiE12priceChanges_10,
        din11 => p_ZZ9updateRSIfRfRiE12priceChanges_11,
        din12 => p_ZZ9updateRSIfRfRiE12priceChanges_12,
        din13 => p_ZZ9updateRSIfRfRiE12priceChanges_13,
        def => tmp_8_fu_1361_p29,
        sel => tmp_8_fu_1361_p30,
        dout => tmp_8_fu_1361_p31);

    mul_16ns_10ns_24_1_1_U50 : component simple_threshold_mul_16ns_10ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln104_fu_1859_p0,
        din1 => mul_ln104_fu_1859_p1,
        dout => mul_ln104_fu_1859_p2);

    regslice_both_top_bid_U : component simple_threshold_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => top_bid_TDATA,
        vld_in => top_bid_TVALID,
        ack_in => regslice_both_top_bid_U_ack_in,
        data_out => top_bid_TDATA_int_regslice,
        vld_out => top_bid_TVALID_int_regslice,
        ack_out => top_bid_TREADY_int_regslice,
        apdone_blk => regslice_both_top_bid_U_apdone_blk);

    regslice_both_top_ask_U : component simple_threshold_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => top_ask_TDATA,
        vld_in => top_ask_TVALID,
        ack_in => regslice_both_top_ask_U_ack_in,
        data_out => top_ask_TDATA_int_regslice,
        vld_out => top_ask_TVALID_int_regslice,
        ack_out => top_ask_TREADY_int_regslice,
        apdone_blk => regslice_both_top_ask_U_apdone_blk);

    regslice_both_incoming_time_U : component simple_threshold_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => incoming_time_TDATA,
        vld_in => incoming_time_TVALID,
        ack_in => regslice_both_incoming_time_U_ack_in,
        data_out => incoming_time_TDATA_int_regslice,
        vld_out => incoming_time_TVALID_int_regslice,
        ack_out => incoming_time_TREADY_int_regslice,
        apdone_blk => regslice_both_incoming_time_U_apdone_blk);

    regslice_both_incoming_meta_U : component simple_threshold_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => incoming_meta_TDATA,
        vld_in => incoming_meta_TVALID,
        ack_in => regslice_both_incoming_meta_U_ack_in,
        data_out => incoming_meta_TDATA_int_regslice,
        vld_out => incoming_meta_TVALID_int_regslice,
        ack_out => incoming_meta_TREADY_int_regslice,
        apdone_blk => regslice_both_incoming_meta_U_apdone_blk);

    regslice_both_outgoing_order_U : component simple_threshold_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => outgoing_order_TDATA_int_regslice,
        vld_in => outgoing_order_TVALID_int_regslice,
        ack_in => outgoing_order_TREADY_int_regslice,
        data_out => outgoing_order_TDATA,
        vld_out => regslice_both_outgoing_order_U_vld_out,
        ack_out => outgoing_order_TREADY,
        apdone_blk => regslice_both_outgoing_order_U_apdone_blk);

    regslice_both_outgoing_time_U : component simple_threshold_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => incoming_time_TDATA_int_regslice,
        vld_in => outgoing_time_TVALID_int_regslice,
        ack_in => outgoing_time_TREADY_int_regslice,
        data_out => outgoing_time_TDATA,
        vld_out => regslice_both_outgoing_time_U_vld_out,
        ack_out => outgoing_time_TREADY,
        apdone_blk => regslice_both_outgoing_time_U_apdone_blk);

    regslice_both_outgoing_meta_U : component simple_threshold_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => incoming_meta_TDATA_int_regslice,
        vld_in => outgoing_meta_TVALID_int_regslice,
        ack_in => outgoing_meta_TREADY_int_regslice,
        data_out => outgoing_meta_TDATA,
        vld_out => regslice_both_outgoing_meta_U_vld_out,
        ack_out => outgoing_meta_TREADY,
        apdone_blk => regslice_both_outgoing_meta_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                    grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_ready = ap_const_logic_1)) then 
                    grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                    grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_ready = ap_const_logic_1)) then 
                    grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cooldownTimer_flag_3_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state154)) or ((ap_const_lv1_0 = and_ln164_reg_2338) and (ap_const_logic_1 = ap_CS_fsm_state153)) or ((tmp_nbreadreq_fu_350_p3 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln151_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_nbreadreq_fu_350_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                cooldownTimer_flag_3_reg_413 <= ap_const_lv1_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state155_io) or (ap_const_boolean_1 = ap_block_state155))) and (icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155))) then 
                cooldownTimer_flag_3_reg_413 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    empty_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state154)) or ((ap_const_lv1_0 = and_ln164_reg_2338) and (ap_const_logic_1 = ap_CS_fsm_state153)))) then 
                empty_reg_434 <= ap_const_lv31_0;
            elsif ((((tmp_nbreadreq_fu_350_p3 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln151_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_nbreadreq_fu_350_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                empty_reg_434 <= cooldownTimer;
            elsif ((not(((ap_const_boolean_1 = ap_block_state155_io) or (ap_const_boolean_1 = ap_block_state155))) and (icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155))) then 
                empty_reg_434 <= ap_const_lv31_A;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                and_ln151_reg_2011 <= and_ln151_fu_580_p2;
                tmp_24_reg_2018 <= updateCounter(31 downto 31);
                tmp_reg_2004 <= tmp_nbreadreq_fu_350_p3;
                xor_ln45_reg_2025 <= xor_ln45_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                and_ln161_reg_2241 <= and_ln161_fu_1573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state153)) then
                and_ln162_3_reg_2354 <= and_ln162_3_fu_1824_p2;
                isUptrend_reg_2348 <= isUptrend_fu_1797_p2;
                tradeOrder_direction_reg_2367 <= tradeOrder_direction_fu_1850_p2;
                tradeOrder_size_3_reg_2361 <= tradeOrder_size_3_fu_1837_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state141)) then
                and_ln164_reg_2338 <= and_ln164_fu_1746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                and_ln75_reg_2252 <= and_ln75_fu_1615_p2;
                bitcast_ln75_reg_2247 <= bitcast_ln75_fu_1579_p1;
                tmp_15_reg_2258 <= grp_fu_522_p2;
                tmp_19_reg_2263 <= grp_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                ask_price_reg_2042 <= ask_price_fu_632_p1;
                ask_size_reg_2047 <= top_ask_TDATA_int_regslice(23 downto 16);
                bid_price_reg_2032 <= bid_price_fu_618_p1;
                bid_size_reg_2037 <= top_bid_TDATA_int_regslice(23 downto 16);
                lshr_ln_reg_2052 <= add_ln156_fu_654_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                conv1_i_reg_2288 <= grp_fu_514_p1;
                gain_1_reg_2273 <= gain_1_fu_1630_p3;
                loss_1_reg_2278 <= loss_1_fu_1637_p3;
                trunc_ln479_reg_2283 <= trunc_ln479_fu_1648_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state155_io) or (ap_const_boolean_1 = ap_block_state155))) and (or_ln178_fu_1972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155))) then
                cooldownTimer <= select_ln178_fu_1978_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state138)) then
                div_i8_reg_2318 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state140)) then
                icmp_ln164_1_reg_2333 <= icmp_ln164_1_fu_1736_p2;
                icmp_ln164_reg_2328 <= icmp_ln164_fu_1730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state154)) then
                icmp_ln166_reg_2372 <= icmp_ln166_fu_1938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                icmp_ln70_reg_2221 <= icmp_ln70_fu_1269_p2;
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load_reg_2171 <= ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load;
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load_reg_2201 <= ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load;
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load_reg_2206 <= ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load;
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load_reg_2211 <= ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load;
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load_reg_2216 <= ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load;
                updateCounter <= add_ln58_fu_1258_p2;
                updateMovingAverages_float_float_float_int_longTermPrices_10_load_reg_2151 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_10_load;
                updateMovingAverages_float_float_float_int_longTermPrices_11_load_reg_2156 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_11_load;
                updateMovingAverages_float_float_float_int_longTermPrices_12_load_reg_2161 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_12_load;
                updateMovingAverages_float_float_float_int_longTermPrices_13_load_reg_2166 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_13_load;
                updateMovingAverages_float_float_float_int_longTermPrices_35_reg_2181 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_35;
                updateMovingAverages_float_float_float_int_longTermPrices_36_reg_2186 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_36;
                updateMovingAverages_float_float_float_int_longTermPrices_37_reg_2191 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_37;
                updateMovingAverages_float_float_float_int_longTermPrices_38_reg_2196 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_38;
                updateMovingAverages_float_float_float_int_longTermPrices_5_load_reg_2126 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_5_load;
                updateMovingAverages_float_float_float_int_longTermPrices_6_load_reg_2131 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_6_load;
                updateMovingAverages_float_float_float_int_longTermPrices_7_load_reg_2136 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_7_load;
                updateMovingAverages_float_float_float_int_longTermPrices_8_load_reg_2141 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_8_load;
                updateMovingAverages_float_float_float_int_longTermPrices_9_load_reg_2146 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_9_load;
                updateMovingAverages_float_float_float_int_longTermPrices_load_reg_2121 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_load;
                updateMovingAverages_float_float_float_int_longTermPrices_reg_2176 <= ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then
                icmp_ln83_1_reg_2303 <= icmp_ln83_1_fu_1688_p2;
                icmp_ln83_reg_2298 <= icmp_ln83_fu_1682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state152)) then
                or_ln161_2_reg_2342 <= or_ln161_2_fu_1782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_A) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_B) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_11 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_C) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_12 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_D) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_13 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_E) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_14 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_F) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_15 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_10) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_11) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_12) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln46_fu_1026_p3 = ap_const_lv5_12)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_11)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_10)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_F)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_E)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_D)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_C)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_B)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_A)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_9)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_8)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_7)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_6)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_5)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_4)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_3)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_2)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_1)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_0)) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_9) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                p_ZZ9updateRSIfRfRiE12priceChanges_10 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_A) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                p_ZZ9updateRSIfRfRiE12priceChanges_11 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                p_ZZ9updateRSIfRfRiE12priceChanges_12 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_C) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                p_ZZ9updateRSIfRfRiE12priceChanges_13 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                previousPrice_reg_2236 <= previousPrice_fu_1425_p3;
                select_ln72_reg_2232 <= select_ln72_fu_1298_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state110))) then
                reg_543 <= grp_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state110))) then
                reg_552 <= grp_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state138) or (ap_const_logic_1 = ap_CS_fsm_state110))) then
                reg_562 <= grp_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                select_ln156_2_reg_2060 <= select_ln156_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state114)) then
                sub_i7_reg_2268 <= grp_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then
                tmp_11_reg_2308 <= grp_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_6) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_10 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_7) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_11 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_8) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_12 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_9) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_13 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_5 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_2) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_6 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_3) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_7 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_4) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_8 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln46_fu_1026_p3 = ap_const_lv5_5) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                updateMovingAverages_float_float_float_int_longTermPrices_9 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln45_fu_974_p3 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                updateMovingAverages_float_float_float_int_shortTermPrices <= select_ln156_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln45_fu_974_p3 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                updateMovingAverages_float_float_float_int_shortTermPrices_1 <= select_ln156_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln45_fu_974_p3 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                updateMovingAverages_float_float_float_int_shortTermPrices_2 <= select_ln156_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln45_fu_974_p3 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                updateMovingAverages_float_float_float_int_shortTermPrices_3 <= select_ln156_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln45_fu_974_p3 = ap_const_lv3_3)) and not((select_ln45_fu_974_p3 = ap_const_lv3_2)) and not((select_ln45_fu_974_p3 = ap_const_lv3_1)) and not((select_ln45_fu_974_p3 = ap_const_lv3_0)) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                updateMovingAverages_float_float_float_int_shortTermPrices_4 <= select_ln156_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state110) and ((select_ln72_reg_2232 = ap_const_lv4_D) or ((select_ln72_reg_2232 = ap_const_lv4_E) or (select_ln72_reg_2232 = ap_const_lv4_F))))) then
                updateRSI_float_float_int_priceChanges <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_14 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_15 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_16 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_17 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_18 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_19 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_20 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_21 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln72_reg_2232 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                updateRSI_float_float_int_priceChanges_22 <= select_ln156_2_reg_2060;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state35, ap_CS_fsm_state154, ap_CS_fsm_state155, and_ln164_reg_2338, tmp_nbreadreq_fu_350_p3, ap_CS_fsm_state1, and_ln151_fu_580_p2, ap_CS_fsm_state153, ap_block_state155, ap_block_state155_io, ap_block_state154, ap_block_state154_io, ap_CS_fsm_state72, ap_block_state35, ap_block_state72_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_nbreadreq_fu_350_p3 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln151_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state155;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_boolean_0 = ap_block_state35) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_boolean_0 = ap_block_state72_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                if (((ap_const_lv1_0 = and_ln164_reg_2338) and (ap_const_logic_1 = ap_CS_fsm_state153))) then
                    ap_NS_fsm <= ap_ST_fsm_state155;
                else
                    ap_NS_fsm <= ap_ST_fsm_state154;
                end if;
            when ap_ST_fsm_state154 => 
                if ((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (ap_const_logic_1 = ap_CS_fsm_state154))) then
                    ap_NS_fsm <= ap_ST_fsm_state155;
                else
                    ap_NS_fsm <= ap_ST_fsm_state154;
                end if;
            when ap_ST_fsm_state155 => 
                if ((not(((ap_const_boolean_1 = ap_block_state155_io) or (ap_const_boolean_1 = ap_block_state155))) and (ap_const_logic_1 = ap_CS_fsm_state155))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state155;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    LD_fu_948_p1 <= pi_assign_fu_936_p5(32 - 1 downto 0);
    add_ln156_1_fu_718_p2 <= std_logic_vector(unsigned(sub_ln156_fu_712_p2) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln156_2_fu_836_p2 <= std_logic_vector(unsigned(sub_ln156_fu_712_p2) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln156_3_fu_880_p2 <= std_logic_vector(unsigned(select_ln156_fu_868_p3) + unsigned(zext_ln156_6_fu_876_p1));
    add_ln156_4_fu_922_p2 <= std_logic_vector(unsigned(sub_ln156_2_fu_916_p2) + unsigned(select_ln156_1_fu_908_p3));
    add_ln156_fu_654_p2 <= std_logic_vector(unsigned(zext_ln156_1_fu_650_p1) + unsigned(zext_ln156_fu_646_p1));
    add_ln179_fu_1966_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_phi_fu_438_p10) + unsigned(ap_const_lv31_7FFFFFFF));
    add_ln58_fu_1258_p2 <= std_logic_vector(unsigned(updateCounter) + unsigned(ap_const_lv32_1));
    and_ln151_fu_580_p2 <= (tmp_1_nbreadreq_fu_358_p3 and icmp_ln151_fu_574_p2);
    and_ln156_1_fu_807_p2 <= (xor_ln156_fu_789_p2 and bit_select30_i_i1_fu_799_p3);
    and_ln156_2_fu_764_p2 <= (trunc_ln156_2_fu_760_p1 and lshr_ln_reg_2052);
    and_ln156_fu_775_p2 <= (icmp_ln156_2_fu_769_p2 and icmp_ln156_1_fu_734_p2);
    and_ln161_1_fu_1788_p2 <= (tmp_15_reg_2258 and and_ln161_reg_2241);
    and_ln161_2_fu_1792_p2 <= (or_ln161_2_reg_2342 and grp_fu_517_p2);
    and_ln161_fu_1573_p2 <= (or_ln161_fu_1549_p2 and or_ln161_1_fu_1567_p2);
    and_ln162_1_fu_1807_p2 <= (or_ln161_2_reg_2342 and grp_fu_522_p2);
    and_ln162_2_fu_1818_p2 <= (xor_ln161_fu_1812_p2 and and_ln162_1_fu_1807_p2);
    and_ln162_3_fu_1824_p2 <= (and_ln162_fu_1803_p2 and and_ln162_2_fu_1818_p2);
    and_ln162_4_fu_1844_p2 <= (and_ln162_fu_1803_p2 and and_ln162_1_fu_1807_p2);
    and_ln162_fu_1803_p2 <= (tmp_19_reg_2263 and and_ln161_reg_2241);
    and_ln164_fu_1746_p2 <= (or_ln164_fu_1742_p2 and grp_fu_517_p2);
    and_ln75_fu_1615_p2 <= (or_ln75_fu_1609_p2 and grp_fu_517_p2);
    and_ln83_fu_1698_p2 <= (tmp_11_reg_2308 and or_ln83_fu_1694_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state151 <= ap_CS_fsm(150);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state154 <= ap_CS_fsm(153);
    ap_CS_fsm_state155 <= ap_CS_fsm(154);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state151_blk <= ap_const_logic_0;
    ap_ST_fsm_state152_blk <= ap_const_logic_0;
    ap_ST_fsm_state153_blk <= ap_const_logic_0;

    ap_ST_fsm_state154_blk_assign_proc : process(ap_block_state154, ap_block_state154_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) then 
            ap_ST_fsm_state154_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state154_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state155_blk_assign_proc : process(ap_block_state155, ap_block_state155_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state155_io) or (ap_const_boolean_1 = ap_block_state155))) then 
            ap_ST_fsm_state155_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state155_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;

    ap_ST_fsm_state35_blk_assign_proc : process(ap_block_state35)
    begin
        if ((ap_const_boolean_1 = ap_block_state35)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;

    ap_ST_fsm_state72_blk_assign_proc : process(ap_block_state72_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state72_on_subcall_done)) then 
            ap_ST_fsm_state72_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state72_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state154_assign_proc : process(icmp_ln166_fu_1938_p2, incoming_time_TVALID_int_regslice, incoming_meta_TVALID_int_regslice, outgoing_order_TREADY_int_regslice, outgoing_time_TREADY_int_regslice, outgoing_meta_TREADY_int_regslice)
    begin
                ap_block_state154 <= (((outgoing_meta_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)) or ((outgoing_time_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)) or ((outgoing_order_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)) or ((incoming_meta_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)) or ((incoming_time_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state154_io_assign_proc : process(icmp_ln166_fu_1938_p2, outgoing_order_TREADY_int_regslice, outgoing_time_TREADY_int_regslice, outgoing_meta_TREADY_int_regslice)
    begin
                ap_block_state154_io <= (((outgoing_meta_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)) or ((outgoing_time_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)) or ((outgoing_order_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0)));
    end process;


    ap_block_state155_assign_proc : process(ap_predicate_op692_write_state155, ap_predicate_op693_write_state155, ap_predicate_op694_write_state155, regslice_both_outgoing_order_U_apdone_blk, regslice_both_outgoing_time_U_apdone_blk, regslice_both_outgoing_meta_U_apdone_blk, outgoing_order_TREADY_int_regslice, outgoing_time_TREADY_int_regslice, outgoing_meta_TREADY_int_regslice)
    begin
                ap_block_state155 <= ((regslice_both_outgoing_meta_U_apdone_blk = ap_const_logic_1) or (regslice_both_outgoing_time_U_apdone_blk = ap_const_logic_1) or (regslice_both_outgoing_order_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op694_write_state155 = ap_const_boolean_1) and (outgoing_time_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op693_write_state155 = ap_const_boolean_1) and (outgoing_meta_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op692_write_state155 = ap_const_boolean_1) and (outgoing_order_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state155_io_assign_proc : process(ap_predicate_op692_write_state155, ap_predicate_op693_write_state155, ap_predicate_op694_write_state155, outgoing_order_TREADY_int_regslice, outgoing_time_TREADY_int_regslice, outgoing_meta_TREADY_int_regslice)
    begin
                ap_block_state155_io <= (((ap_predicate_op694_write_state155 = ap_const_boolean_1) and (outgoing_time_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op693_write_state155 = ap_const_boolean_1) and (outgoing_meta_TREADY_int_regslice = ap_const_logic_0)) or ((ap_predicate_op692_write_state155 = ap_const_boolean_1) and (outgoing_order_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state35_assign_proc : process(top_bid_TVALID_int_regslice, top_ask_TVALID_int_regslice)
    begin
                ap_block_state35 <= ((top_ask_TVALID_int_regslice = ap_const_logic_0) or (top_bid_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state72_on_subcall_done_assign_proc : process(grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_done, grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_done)
    begin
                ap_block_state72_on_subcall_done <= ((grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_done = ap_const_logic_0) or (grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_done = ap_const_logic_0));
    end process;


    ap_phi_mux_cooldownTimer_flag_3_phi_fu_417_p10_assign_proc : process(ap_CS_fsm_state155, tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372, cooldownTimer_flag_3_reg_413)
    begin
        if (((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155))) then 
            ap_phi_mux_cooldownTimer_flag_3_phi_fu_417_p10 <= ap_const_lv1_1;
        else 
            ap_phi_mux_cooldownTimer_flag_3_phi_fu_417_p10 <= cooldownTimer_flag_3_reg_413;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_438_p10_assign_proc : process(ap_CS_fsm_state155, tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372, empty_reg_434)
    begin
        if (((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155))) then 
            ap_phi_mux_empty_phi_fu_438_p10 <= ap_const_lv31_A;
        else 
            ap_phi_mux_empty_phi_fu_438_p10 <= empty_reg_434;
        end if; 
    end process;


    ap_predicate_op692_write_state155_assign_proc : process(tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372)
    begin
                ap_predicate_op692_write_state155 <= ((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1));
    end process;


    ap_predicate_op693_write_state155_assign_proc : process(tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372)
    begin
                ap_predicate_op693_write_state155 <= ((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1));
    end process;


    ap_predicate_op694_write_state155_assign_proc : process(tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372)
    begin
                ap_predicate_op694_write_state155 <= ((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_A) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_10) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_11) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_12) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18;
        end if; 
    end process;


    ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if ((not((select_ln46_fu_1026_p3 = ap_const_lv5_12)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_11)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_10)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_F)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_E)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_D)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_C)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_B)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_A)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_9)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_8)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_7)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_6)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_5)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_4)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_3)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_2)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_1)) and not((select_ln46_fu_1026_p3 = ap_const_lv5_0)) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_11, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_B) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_11;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_10_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_10, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_6) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_10_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_10_load <= updateMovingAverages_float_float_float_int_longTermPrices_10;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_11_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_11, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_7) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_11_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_11_load <= updateMovingAverages_float_float_float_int_longTermPrices_11;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_12_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_12, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_8) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_12_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_12_load <= updateMovingAverages_float_float_float_int_longTermPrices_12;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_13_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_13, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_9) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_13_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_13_load <= updateMovingAverages_float_float_float_int_longTermPrices_13;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_35_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_12, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_C) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_35 <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_35 <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_12;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_36_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_13, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_D) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_36 <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_36 <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_13;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_37_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_14, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_E) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_37 <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_37 <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_14;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_38_assign_proc : process(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_15, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_F) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_38 <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_38 <= p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_15;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_5_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_5, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_5_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_5_load <= updateMovingAverages_float_float_float_int_longTermPrices_5;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_6_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_6, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_2) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_6_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_6_load <= updateMovingAverages_float_float_float_int_longTermPrices_6;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_7_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_7, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_3) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_7_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_7_load <= updateMovingAverages_float_float_float_int_longTermPrices_7;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_8_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_8, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_4) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_8_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_8_load <= updateMovingAverages_float_float_float_int_longTermPrices_8;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_9_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices_9, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_5) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_9_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_9_load <= updateMovingAverages_float_float_float_int_longTermPrices_9;
        end if; 
    end process;


    ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_load_assign_proc : process(updateMovingAverages_float_float_float_int_longTermPrices, select_ln156_2_reg_2060, ap_CS_fsm_state71, select_ln46_fu_1026_p3)
    begin
        if (((select_ln46_fu_1026_p3 = ap_const_lv5_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_load <= select_ln156_2_reg_2060;
        else 
            ap_sig_allocacmp_updateMovingAverages_float_float_float_int_longTermPrices_load <= updateMovingAverages_float_float_float_int_longTermPrices;
        end if; 
    end process;

    ask_price_fu_632_p1 <= top_ask_TDATA_int_regslice(16 - 1 downto 0);
    bid_price_fu_618_p1 <= top_bid_TDATA_int_regslice(16 - 1 downto 0);
    bit_select30_i_i1_fu_799_p3 <= zext_ln156_2_fu_670_p1(to_integer(unsigned(trunc_ln156_3_fu_795_p1)) downto to_integer(unsigned(trunc_ln156_3_fu_795_p1))) when (to_integer(unsigned(trunc_ln156_3_fu_795_p1)) >= 0 and to_integer(unsigned(trunc_ln156_3_fu_795_p1)) <=17) else "-";
    bitcast_ln161_1_fu_1519_p1 <= reg_552;
    bitcast_ln161_2_fu_1752_p1 <= reg_562;
    bitcast_ln161_fu_1501_p1 <= reg_543;
    bitcast_ln164_fu_1712_p1 <= grp_fu_508_p1;
    bitcast_ln75_fu_1579_p1 <= reg_562;
    bitcast_ln766_fu_952_p1 <= LD_fu_948_p1;
    bitcast_ln83_fu_1664_p1 <= reg_552;
    data_fu_1644_p1 <= grp_fu_511_p1;
    gain_1_fu_1630_p3 <= 
        grp_fu_488_p2 when (and_ln75_reg_2252(0) = '1') else 
        ap_const_lv32_0;

    grp_fu_1011_ap_start_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_1011_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1011_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1011_p1 <= ap_const_lv32_14(6 - 1 downto 0);

    grp_fu_1275_ap_start_assign_proc : process(ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_1275_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1275_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1275_ce_assign_proc : process(ap_CS_fsm_state71, ap_CS_fsm_state106, ap_CS_fsm_state72, ap_CS_fsm_state102, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101, ap_CS_fsm_state103, ap_CS_fsm_state104, ap_CS_fsm_state105)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 
    = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            grp_fu_1275_ce <= ap_const_logic_1;
        else 
            grp_fu_1275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1275_p1 <= ap_const_lv32_E(5 - 1 downto 0);

    grp_fu_488_ce_assign_proc : process(grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_ce, ap_CS_fsm_state72)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_488_ce <= grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_ce;
        else 
            grp_fu_488_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_488_opcode_assign_proc : process(ap_CS_fsm_state111, and_ln75_reg_2252, ap_CS_fsm_state135, grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_opcode, ap_CS_fsm_state72, ap_CS_fsm_state107, ap_CS_fsm_state113, ap_CS_fsm_state148)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_488_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_opcode),2));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state148) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            grp_fu_488_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state135) or ((ap_const_lv1_1 = and_ln75_reg_2252) and (ap_const_logic_1 = ap_CS_fsm_state113)))) then 
            grp_fu_488_opcode <= ap_const_lv2_0;
        else 
            grp_fu_488_opcode <= "XX";
        end if; 
    end process;


    grp_fu_488_p0_assign_proc : process(reg_543, reg_562, select_ln156_2_reg_2060, ap_CS_fsm_state111, rs_fu_1703_p3, ap_CS_fsm_state135, grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din0, ap_CS_fsm_state72, ap_CS_fsm_state107, ap_CS_fsm_state113, ap_CS_fsm_state148)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_488_p0 <= grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
            grp_fu_488_p0 <= ap_const_lv32_42C80000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state135)) then 
            grp_fu_488_p0 <= rs_fu_1703_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            grp_fu_488_p0 <= reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_488_p0 <= reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            grp_fu_488_p0 <= select_ln156_2_reg_2060;
        else 
            grp_fu_488_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_488_p1_assign_proc : process(reg_543, reg_552, previousPrice_reg_2236, ap_CS_fsm_state111, ap_CS_fsm_state135, grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din1, ap_CS_fsm_state72, ap_CS_fsm_state107, ap_CS_fsm_state113, ap_CS_fsm_state148)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_488_p1 <= grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_grp_fu_488_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
            grp_fu_488_p1 <= reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state135)) then 
            grp_fu_488_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            grp_fu_488_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_488_p1 <= reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            grp_fu_488_p1 <= previousPrice_reg_2236;
        else 
            grp_fu_488_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_495_p0_assign_proc : process(reg_543, gain_1_reg_2273, ap_CS_fsm_state117, ap_CS_fsm_state126, grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_shortSum_out, ap_CS_fsm_state102, ap_CS_fsm_state139)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            grp_fu_495_p0 <= ap_const_lv32_42C80000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            grp_fu_495_p0 <= reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_495_p0 <= gain_1_reg_2273;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_495_p0 <= grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_shortSum_out;
        else 
            grp_fu_495_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_495_p1_assign_proc : process(reg_552, reg_562, ap_CS_fsm_state117, ap_CS_fsm_state126, ap_CS_fsm_state102, ap_CS_fsm_state139)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            grp_fu_495_p1 <= reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            grp_fu_495_p1 <= reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_495_p1 <= ap_const_lv32_41600000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_495_p1 <= ap_const_lv32_40A00000;
        else 
            grp_fu_495_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_500_p0_assign_proc : process(loss_1_reg_2278, ap_CS_fsm_state117, grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_longSum_out, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_500_p0 <= loss_1_reg_2278;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_500_p0 <= grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_longSum_out;
        else 
            grp_fu_500_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_500_p1_assign_proc : process(ap_CS_fsm_state117, ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_500_p1 <= ap_const_lv32_41600000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_500_p1 <= ap_const_lv32_41A00000;
        else 
            grp_fu_500_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_517_opcode_assign_proc : process(ap_CS_fsm_state111, ap_CS_fsm_state126, ap_CS_fsm_state140, ap_CS_fsm_state152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            grp_fu_517_opcode <= ap_const_lv5_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state140) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            grp_fu_517_opcode <= ap_const_lv5_2;
        else 
            grp_fu_517_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_517_p0_assign_proc : process(reg_552, reg_562, ap_CS_fsm_state111, ap_CS_fsm_state126, grp_fu_508_p1, ap_CS_fsm_state140, ap_CS_fsm_state152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            grp_fu_517_p0 <= grp_fu_508_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            grp_fu_517_p0 <= reg_552;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            grp_fu_517_p0 <= reg_562;
        else 
            grp_fu_517_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_517_p1_assign_proc : process(ap_CS_fsm_state111, ap_CS_fsm_state126, ap_CS_fsm_state140, ap_CS_fsm_state152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
            grp_fu_517_p1 <= ap_const_lv32_42480000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            grp_fu_517_p1 <= ap_const_lv32_3D4CCCCD;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state111))) then 
            grp_fu_517_p1 <= ap_const_lv32_0;
        else 
            grp_fu_517_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_522_opcode_assign_proc : process(ap_CS_fsm_state111, ap_CS_fsm_state152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
            grp_fu_522_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_522_opcode <= ap_const_lv5_2;
        else 
            grp_fu_522_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_522_p0_assign_proc : process(reg_543, reg_562, ap_CS_fsm_state111, ap_CS_fsm_state152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
            grp_fu_522_p0 <= reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_522_p0 <= reg_543;
        else 
            grp_fu_522_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_522_p1_assign_proc : process(reg_552, ap_CS_fsm_state111, ap_CS_fsm_state152)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
            grp_fu_522_p1 <= ap_const_lv32_42480000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_fu_522_p1 <= reg_552;
        else 
            grp_fu_522_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_534_p0 <= t_fu_1652_p3;

    grp_fu_612_ap_start_assign_proc : process(tmp_nbreadreq_fu_350_p3, ap_CS_fsm_state1, and_ln151_fu_580_p2)
    begin
        if (((tmp_nbreadreq_fu_350_p3 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln151_fu_580_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_612_ap_start <= ap_const_logic_1;
        else 
            grp_fu_612_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_612_ce_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state1, ap_CS_fsm_state36, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 
    = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_612_ce <= ap_const_logic_1;
        else 
            grp_fu_612_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_612_p0 <= (updateCounter xor select_ln45_1_fu_598_p3);
    grp_fu_612_p1 <= ap_const_lv32_5(4 - 1 downto 0);
    grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start <= grp_simple_threshold_Pipeline_VITIS_LOOP_49_1_fu_453_ap_start_reg;
    grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start <= grp_simple_threshold_Pipeline_VITIS_LOOP_52_2_fu_463_ap_start_reg;
    icmp_ln151_fu_574_p2 <= "1" when (cooldownTimer = ap_const_lv31_0) else "0";
    icmp_ln156_1_fu_734_p2 <= "1" when (signed(tmp_2_fu_724_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln156_2_fu_769_p2 <= "0" when (and_ln156_2_fu_764_p2 = ap_const_lv16_0) else "1";
    icmp_ln156_3_fu_830_p2 <= "1" when (signed(add_ln156_1_fu_718_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln156_fu_673_p2 <= "0" when (lshr_ln_reg_2052 = ap_const_lv16_0) else "1";
    icmp_ln161_1_fu_1543_p2 <= "1" when (trunc_ln161_fu_1515_p1 = ap_const_lv23_0) else "0";
    icmp_ln161_2_fu_1555_p2 <= "0" when (tmp_14_fu_1523_p4 = ap_const_lv8_FF) else "1";
    icmp_ln161_3_fu_1561_p2 <= "1" when (trunc_ln161_1_fu_1533_p1 = ap_const_lv23_0) else "0";
    icmp_ln161_4_fu_1770_p2 <= "0" when (tmp_16_fu_1756_p4 = ap_const_lv8_FF) else "1";
    icmp_ln161_5_fu_1776_p2 <= "1" when (trunc_ln161_2_fu_1766_p1 = ap_const_lv23_0) else "0";
    icmp_ln161_fu_1537_p2 <= "0" when (tmp_12_fu_1505_p4 = ap_const_lv8_FF) else "1";
    icmp_ln164_1_fu_1736_p2 <= "1" when (trunc_ln164_fu_1726_p1 = ap_const_lv23_0) else "0";
    icmp_ln164_fu_1730_p2 <= "0" when (tmp_21_fu_1716_p4 = ap_const_lv8_FF) else "1";
    icmp_ln166_fu_1938_p2 <= "1" when (tradeOrder_size_3_reg_2361 = ap_const_lv8_0) else "0";
    icmp_ln178_fu_1960_p2 <= "0" when (ap_phi_mux_empty_phi_fu_438_p10 = ap_const_lv31_0) else "1";
    icmp_ln70_fu_1269_p2 <= "1" when (signed(add_ln58_fu_1258_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln75_1_fu_1603_p2 <= "1" when (trunc_ln75_fu_1593_p1 = ap_const_lv23_0) else "0";
    icmp_ln75_fu_1597_p2 <= "0" when (tmp_9_fu_1583_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_1_fu_1688_p2 <= "1" when (trunc_ln83_fu_1678_p1 = ap_const_lv23_0) else "0";
    icmp_ln83_fu_1682_p2 <= "0" when (tmp_10_fu_1668_p4 = ap_const_lv8_FF) else "1";

    incoming_meta_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, incoming_meta_TVALID_int_regslice)
    begin
        if (((icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            incoming_meta_TDATA_blk_n <= incoming_meta_TVALID_int_regslice;
        else 
            incoming_meta_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    incoming_meta_TREADY <= regslice_both_incoming_meta_U_ack_in;

    incoming_meta_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_block_state154, ap_block_state154_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            incoming_meta_TREADY_int_regslice <= ap_const_logic_1;
        else 
            incoming_meta_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    incoming_time_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, incoming_time_TVALID_int_regslice)
    begin
        if (((icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            incoming_time_TDATA_blk_n <= incoming_time_TVALID_int_regslice;
        else 
            incoming_time_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    incoming_time_TREADY <= regslice_both_incoming_time_U_ack_in;

    incoming_time_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_block_state154, ap_block_state154_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            incoming_time_TREADY_int_regslice <= ap_const_logic_1;
        else 
            incoming_time_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    isUptrend_fu_1797_p2 <= (and_ln161_2_fu_1792_p2 and and_ln161_1_fu_1788_p2);
    loss_1_fu_1637_p3 <= 
        ap_const_lv32_0 when (and_ln75_reg_2252(0) = '1') else 
        loss_fu_1626_p1;
    loss_fu_1626_p1 <= xor_ln76_fu_1621_p2;
    lshr_ln156_1_fu_754_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv18_3FFFF),to_integer(unsigned('0' & zext_ln156_8_fu_750_p1(18-1 downto 0)))));
    lshr_ln156_2_fu_886_p4 <= add_ln156_3_fu_880_p2(63 downto 1);
    lshr_ln156_fu_846_p2 <= std_logic_vector(shift_right(unsigned(zext_ln156_3_fu_827_p1),to_integer(unsigned('0' & zext_ln156_4_fu_842_p1(31-1 downto 0)))));
    mul_ln104_fu_1859_p0 <= mul_ln104_fu_1859_p00(16 - 1 downto 0);
    mul_ln104_fu_1859_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bid_price_reg_2032),24));
    mul_ln104_fu_1859_p1 <= ap_const_lv24_119(10 - 1 downto 0);
    mul_ln109_fu_538_p0 <= mul_ln109_fu_538_p00(24 - 1 downto 0);
    mul_ln109_fu_538_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1875_p3),49));
    mul_ln109_fu_538_p1 <= ap_const_lv49_1D272CB(26 - 1 downto 0);
    or_ln156_fu_813_p2 <= (and_ln156_fu_775_p2 or and_ln156_1_fu_807_p2);
    or_ln161_1_fu_1567_p2 <= (icmp_ln161_3_fu_1561_p2 or icmp_ln161_2_fu_1555_p2);
    or_ln161_2_fu_1782_p2 <= (icmp_ln161_5_fu_1776_p2 or icmp_ln161_4_fu_1770_p2);
    or_ln161_fu_1549_p2 <= (icmp_ln161_fu_1537_p2 or icmp_ln161_1_fu_1543_p2);
    or_ln162_fu_1918_p2 <= (isUptrend_reg_2348 or and_ln162_3_reg_2354);
    or_ln164_fu_1742_p2 <= (icmp_ln164_reg_2328 or icmp_ln164_1_reg_2333);
    or_ln178_fu_1972_p2 <= (icmp_ln178_fu_1960_p2 or ap_phi_mux_cooldownTimer_flag_3_phi_fu_417_p10);
    or_ln75_fu_1609_p2 <= (icmp_ln75_fu_1597_p2 or icmp_ln75_1_fu_1603_p2);
    or_ln83_fu_1694_p2 <= (icmp_ln83_reg_2298 or icmp_ln83_1_reg_2303);
    or_ln_fu_819_p3 <= (ap_const_lv1_0 & or_ln156_fu_813_p2);

    outgoing_meta_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_CS_fsm_state155, tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372, outgoing_meta_TREADY_int_regslice)
    begin
        if ((((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155)) or ((icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154)))) then 
            outgoing_meta_TDATA_blk_n <= outgoing_meta_TREADY_int_regslice;
        else 
            outgoing_meta_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outgoing_meta_TVALID <= regslice_both_outgoing_meta_U_vld_out;

    outgoing_meta_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_block_state154, ap_block_state154_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            outgoing_meta_TVALID_int_regslice <= ap_const_logic_1;
        else 
            outgoing_meta_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    outgoing_order_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_CS_fsm_state155, tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372, outgoing_order_TREADY_int_regslice)
    begin
        if ((((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155)) or ((icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154)))) then 
            outgoing_order_TDATA_blk_n <= outgoing_order_TREADY_int_regslice;
        else 
            outgoing_order_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outgoing_order_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1943_p6),96));
    outgoing_order_TVALID <= regslice_both_outgoing_order_U_vld_out;

    outgoing_order_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_block_state154, ap_block_state154_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            outgoing_order_TVALID_int_regslice <= ap_const_logic_1;
        else 
            outgoing_order_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    outgoing_time_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_CS_fsm_state155, tmp_reg_2004, and_ln151_reg_2011, and_ln164_reg_2338, icmp_ln166_reg_2372, outgoing_time_TREADY_int_regslice)
    begin
        if ((((icmp_ln166_reg_2372 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln164_reg_2338) and (ap_const_lv1_1 = and_ln151_reg_2011) and (tmp_reg_2004 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state155)) or ((icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154)))) then 
            outgoing_time_TDATA_blk_n <= outgoing_time_TREADY_int_regslice;
        else 
            outgoing_time_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outgoing_time_TVALID <= regslice_both_outgoing_time_U_vld_out;

    outgoing_time_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state154, icmp_ln166_fu_1938_p2, ap_block_state154, ap_block_state154_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state154_io) or (ap_const_boolean_1 = ap_block_state154))) and (icmp_ln166_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then 
            outgoing_time_TVALID_int_regslice <= ap_const_logic_1;
        else 
            outgoing_time_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    pi_assign_fu_936_p5 <= (zext_ln156_7_fu_896_p1(63 downto 32) & tmp_3_fu_928_p3 & zext_ln156_7_fu_896_p1(22 downto 0));
    previousPrice_fu_1425_p3 <= 
        tmp_8_fu_1361_p31 when (icmp_ln70_reg_2221(0) = '1') else 
        select_ln156_2_reg_2060;
    rs_fu_1703_p3 <= 
        ap_const_lv32_42C80000 when (and_ln83_fu_1698_p2(0) = '1') else 
        reg_543;
    select_ln156_1_fu_908_p3 <= 
        ap_const_lv8_7F when (tmp_13_fu_900_p3(0) = '1') else 
        ap_const_lv8_7E;
    select_ln156_2_fu_956_p3 <= 
        bitcast_ln766_fu_952_p1 when (icmp_ln156_fu_673_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln156_fu_868_p3 <= 
        lshr_ln156_fu_846_p2 when (icmp_ln156_3_fu_830_p2(0) = '1') else 
        shl_ln156_fu_862_p2;
    select_ln162_fu_1911_p3 <= 
        ap_const_lv8_C8 when (and_ln162_3_reg_2354(0) = '1') else 
        ap_const_lv8_7B;
    select_ln178_fu_1978_p3 <= 
        add_ln179_fu_1966_p2 when (icmp_ln178_fu_1960_p2(0) = '1') else 
        ap_const_lv31_A;
    select_ln45_1_fu_598_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_24_fu_590_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln45_fu_974_p3 <= 
        sub_ln45_fu_968_p2 when (tmp_24_reg_2018(0) = '1') else 
        trunc_ln45_fu_964_p1;
    select_ln46_fu_1026_p3 <= 
        sub_ln46_fu_1020_p2 when (tmp_24_reg_2018(0) = '1') else 
        trunc_ln46_fu_1016_p1;
    select_ln72_fu_1298_p3 <= 
        sub_ln72_fu_1292_p2 when (tmp_24_reg_2018(0) = '1') else 
        trunc_ln72_fu_1288_p1;
        sext_ln156_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_688_p3),32));

        sext_ln162_fu_1930_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tradeOrder_orderID_fu_1922_p3),9));

    shl_ln156_fu_862_p2 <= std_logic_vector(shift_left(unsigned(zext_ln156_3_fu_827_p1),to_integer(unsigned('0' & zext_ln156_5_fu_858_p1(31-1 downto 0)))));
    shl_ln_fu_1875_p3 <= (ask_price_reg_2042 & ap_const_lv8_0);
    sub_ln156_1_fu_852_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln156_fu_712_p2));
    sub_ln156_2_fu_916_p2 <= std_logic_vector(unsigned(ap_const_lv8_A) - unsigned(trunc_ln156_fu_708_p1));
    sub_ln156_3_fu_744_p2 <= std_logic_vector(unsigned(ap_const_lv5_B) - unsigned(trunc_ln156_1_fu_740_p1));
    sub_ln156_fu_712_p2 <= std_logic_vector(unsigned(ap_const_lv32_12) - unsigned(tmp_6_fu_700_p3));
    sub_ln45_fu_968_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(trunc_ln45_fu_964_p1));
    sub_ln46_fu_1020_p2 <= std_logic_vector(signed(ap_const_lv5_13) - signed(trunc_ln46_fu_1016_p1));
    sub_ln72_fu_1292_p2 <= std_logic_vector(unsigned(ap_const_lv4_D) - unsigned(trunc_ln72_fu_1288_p1));
    t_fu_1652_p3 <= (ap_const_lv1_0 & trunc_ln479_reg_2283);
    tmp_10_fu_1668_p4 <= bitcast_ln83_fu_1664_p1(30 downto 23);
    tmp_12_fu_1505_p4 <= bitcast_ln161_fu_1501_p1(30 downto 23);
    tmp_13_fu_900_p3 <= add_ln156_3_fu_880_p2(25 downto 25);
    tmp_14_fu_1523_p4 <= bitcast_ln161_1_fu_1519_p1(30 downto 23);
    tmp_16_fu_1756_p4 <= bitcast_ln161_2_fu_1752_p1(30 downto 23);
    tmp_17_fu_1943_p6 <= ((((tradeOrder_direction_reg_2367 & zext_ln162_fu_1934_p1) & ap_const_lv8_0) & tradeOrder_size_3_reg_2361) & tradeOrder_price_3_fu_1904_p3);
    tmp_1_nbreadreq_fu_358_p3 <= (0=>(top_ask_TVALID_int_regslice), others=>'-');
    tmp_21_fu_1716_p4 <= bitcast_ln164_fu_1712_p1(30 downto 23);
    tmp_24_fu_590_p3 <= updateCounter(31 downto 31);
    tmp_2_fu_724_p4 <= add_ln156_1_fu_718_p2(31 downto 1);
    tmp_3_fu_928_p3 <= (ap_const_lv1_0 & add_ln156_4_fu_922_p2);
    
    tmp_4_fu_678_p4_proc : process(zext_ln156_2_fu_670_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(18+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(18+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(18 - 1 downto 0);
    variable tmp_4_fu_678_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(18 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(18 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(18 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_11(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := zext_ln156_2_fu_670_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(18-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(18-1-unsigned(ap_const_lv32_11(5-1 downto 0)));
            for tmp_4_fu_678_p4_i in 0 to 18-1 loop
                v0_cpy(tmp_4_fu_678_p4_i) := zext_ln156_2_fu_670_p1(18-1-tmp_4_fu_678_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(18-1 downto 0)))));
        res_mask := res_mask(18-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_678_p4 <= resvalue(18-1 downto 0);
    end process;

    tmp_5_fu_688_p3 <= (ap_const_lv1_1 & tmp_4_fu_678_p4);
    
    tmp_6_fu_700_p3_proc : process(sext_ln156_fu_696_p1)
    begin
        tmp_6_fu_700_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln156_fu_696_p1(i) = '1' then
                tmp_6_fu_700_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_7_fu_781_p3 <= add_ln156_1_fu_718_p2(31 downto 31);
    tmp_8_fu_1361_p29 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_8_fu_1361_p30 <= 
        sub_ln72_fu_1292_p2 when (tmp_24_reg_2018(0) = '1') else 
        trunc_ln72_fu_1288_p1;
    tmp_9_fu_1583_p4 <= bitcast_ln75_fu_1579_p1(30 downto 23);
    tmp_nbreadreq_fu_350_p3 <= (0=>(top_bid_TVALID_int_regslice), others=>'-');

    top_ask_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state35, top_ask_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            top_ask_TDATA_blk_n <= top_ask_TVALID_int_regslice;
        else 
            top_ask_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    top_ask_TREADY <= regslice_both_top_ask_U_ack_in;

    top_ask_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state35, ap_block_state35)
    begin
        if (((ap_const_boolean_0 = ap_block_state35) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            top_ask_TREADY_int_regslice <= ap_const_logic_1;
        else 
            top_ask_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    top_bid_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state35, top_bid_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            top_bid_TDATA_blk_n <= top_bid_TVALID_int_regslice;
        else 
            top_bid_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    top_bid_TREADY <= regslice_both_top_bid_U_ack_in;

    top_bid_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state35, ap_block_state35)
    begin
        if (((ap_const_boolean_0 = ap_block_state35) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            top_bid_TREADY_int_regslice <= ap_const_logic_1;
        else 
            top_bid_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tradeOrder_direction_fu_1850_p2 <= (xor_ln161_fu_1812_p2 and and_ln162_4_fu_1844_p2);
    tradeOrder_orderID_fu_1922_p3 <= 
        select_ln162_fu_1911_p3 when (or_ln162_fu_1918_p2(0) = '1') else 
        ap_const_lv8_0;
    tradeOrder_price_1_fu_1887_p4 <= mul_ln109_fu_538_p2(48 downto 33);
    tradeOrder_price_2_fu_1897_p3 <= 
        tradeOrder_price_fu_1865_p4 when (isUptrend_reg_2348(0) = '1') else 
        ap_const_lv16_0;
    tradeOrder_price_3_fu_1904_p3 <= 
        tradeOrder_price_1_fu_1887_p4 when (and_ln162_3_reg_2354(0) = '1') else 
        tradeOrder_price_2_fu_1897_p3;
    tradeOrder_price_fu_1865_p4 <= mul_ln104_fu_1859_p2(23 downto 8);
    tradeOrder_size_2_fu_1830_p3 <= 
        bid_size_reg_2037 when (isUptrend_fu_1797_p2(0) = '1') else 
        ap_const_lv8_0;
    tradeOrder_size_3_fu_1837_p3 <= 
        ask_size_reg_2047 when (and_ln162_3_fu_1824_p2(0) = '1') else 
        tradeOrder_size_2_fu_1830_p3;
    trunc_ln156_1_fu_740_p1 <= sub_ln156_fu_712_p2(5 - 1 downto 0);
    trunc_ln156_2_fu_760_p1 <= lshr_ln156_1_fu_754_p2(16 - 1 downto 0);
    trunc_ln156_3_fu_795_p1 <= add_ln156_1_fu_718_p2(18 - 1 downto 0);
    trunc_ln156_fu_708_p1 <= tmp_6_fu_700_p3(8 - 1 downto 0);
    trunc_ln161_1_fu_1533_p1 <= bitcast_ln161_1_fu_1519_p1(23 - 1 downto 0);
    trunc_ln161_2_fu_1766_p1 <= bitcast_ln161_2_fu_1752_p1(23 - 1 downto 0);
    trunc_ln161_fu_1515_p1 <= bitcast_ln161_fu_1501_p1(23 - 1 downto 0);
    trunc_ln164_fu_1726_p1 <= bitcast_ln164_fu_1712_p1(23 - 1 downto 0);
    trunc_ln45_fu_964_p1 <= grp_fu_612_p2(3 - 1 downto 0);
    trunc_ln46_fu_1016_p1 <= grp_fu_1011_p2(5 - 1 downto 0);
    trunc_ln479_fu_1648_p1 <= data_fu_1644_p1(63 - 1 downto 0);
    trunc_ln72_fu_1288_p1 <= grp_fu_1275_p2(4 - 1 downto 0);
    trunc_ln75_fu_1593_p1 <= bitcast_ln75_fu_1579_p1(23 - 1 downto 0);
    trunc_ln83_fu_1678_p1 <= bitcast_ln83_fu_1664_p1(23 - 1 downto 0);
    xor_ln156_fu_789_p2 <= (tmp_7_fu_781_p3 xor ap_const_lv1_1);
    xor_ln161_fu_1812_p2 <= (isUptrend_fu_1797_p2 xor ap_const_lv1_1);
    xor_ln45_fu_606_p2 <= (updateCounter xor select_ln45_1_fu_598_p3);
    xor_ln76_fu_1621_p2 <= (bitcast_ln75_reg_2247 xor ap_const_lv32_80000000);
    zext_ln156_1_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ask_price_fu_632_p1),17));
    zext_ln156_2_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_2052),18));
    zext_ln156_3_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_2052),64));
    zext_ln156_4_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln156_2_fu_836_p2),64));
    zext_ln156_5_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln156_1_fu_852_p2),64));
    zext_ln156_6_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_819_p3),64));
    zext_ln156_7_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln156_2_fu_886_p4),64));
    zext_ln156_8_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln156_3_fu_744_p2),18));
    zext_ln156_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bid_price_fu_618_p1),17));
    zext_ln162_fu_1934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln162_fu_1930_p1),32));
end behav;
