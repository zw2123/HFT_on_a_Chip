-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_52_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    updateMovingAverages_float_float_float_int_longTermPrices_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_8_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_9_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_11_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_12_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_13_load : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    updateMovingAverages_float_float_float_int_longTermPrices : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load : IN STD_LOGIC_VECTOR (31 downto 0);
    p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load : IN STD_LOGIC_VECTOR (31 downto 0);
    longSum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    longSum_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_52_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln52_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_2_fu_280_p43 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal longSum_fu_112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_longSum_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_116 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln52_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_2_fu_280_p41 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_2_fu_280_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p7 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p9 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p11 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p13 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p15 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p19 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p21 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p23 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p25 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p27 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p29 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p31 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p35 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p37 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_280_p39 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component simple_threshold_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simple_threshold_sparsemux_41_5_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (4 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (4 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (4 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (4 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (4 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (4 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (4 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (4 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (4 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (4 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (4 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (4 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (4 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (4 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (4 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (4 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (4 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (4 downto 0);
        din17_WIDTH : INTEGER;
        CASE18 : STD_LOGIC_VECTOR (4 downto 0);
        din18_WIDTH : INTEGER;
        CASE19 : STD_LOGIC_VECTOR (4 downto 0);
        din19_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simple_threshold_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_4_full_dsp_1_U10 : component simple_threshold_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_longSum_load,
        din1 => tmp_2_fu_280_p43,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);

    sparsemux_41_5_32_1_1_U11 : component simple_threshold_sparsemux_41_5_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000",
        din0_WIDTH => 32,
        CASE1 => "00001",
        din1_WIDTH => 32,
        CASE2 => "00010",
        din2_WIDTH => 32,
        CASE3 => "00011",
        din3_WIDTH => 32,
        CASE4 => "00100",
        din4_WIDTH => 32,
        CASE5 => "00101",
        din5_WIDTH => 32,
        CASE6 => "00110",
        din6_WIDTH => 32,
        CASE7 => "00111",
        din7_WIDTH => 32,
        CASE8 => "01000",
        din8_WIDTH => 32,
        CASE9 => "01001",
        din9_WIDTH => 32,
        CASE10 => "01010",
        din10_WIDTH => 32,
        CASE11 => "01011",
        din11_WIDTH => 32,
        CASE12 => "01100",
        din12_WIDTH => 32,
        CASE13 => "01101",
        din13_WIDTH => 32,
        CASE14 => "01110",
        din14_WIDTH => 32,
        CASE15 => "01111",
        din15_WIDTH => 32,
        CASE16 => "10000",
        din16_WIDTH => 32,
        CASE17 => "10001",
        din17_WIDTH => 32,
        CASE18 => "10010",
        din18_WIDTH => 32,
        CASE19 => "10011",
        din19_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => updateMovingAverages_float_float_float_int_longTermPrices_load,
        din1 => updateMovingAverages_float_float_float_int_longTermPrices_5_load,
        din2 => updateMovingAverages_float_float_float_int_longTermPrices_6_load,
        din3 => updateMovingAverages_float_float_float_int_longTermPrices_7_load,
        din4 => updateMovingAverages_float_float_float_int_longTermPrices_8_load,
        din5 => updateMovingAverages_float_float_float_int_longTermPrices_9_load,
        din6 => updateMovingAverages_float_float_float_int_longTermPrices_10_load,
        din7 => updateMovingAverages_float_float_float_int_longTermPrices_11_load,
        din8 => updateMovingAverages_float_float_float_int_longTermPrices_12_load,
        din9 => updateMovingAverages_float_float_float_int_longTermPrices_13_load,
        din10 => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load,
        din11 => updateMovingAverages_float_float_float_int_longTermPrices_6,
        din12 => updateMovingAverages_float_float_float_int_longTermPrices_7,
        din13 => updateMovingAverages_float_float_float_int_longTermPrices_8,
        din14 => updateMovingAverages_float_float_float_int_longTermPrices_9,
        din15 => updateMovingAverages_float_float_float_int_longTermPrices,
        din16 => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load,
        din17 => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load,
        din18 => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load,
        din19 => p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load,
        def => tmp_2_fu_280_p41,
        sel => i_fu_116,
        dout => tmp_2_fu_280_p43);

    flow_control_loop_pipe_sequential_init_U : component simple_threshold_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_116 <= ap_const_lv5_0;
            elsif (((icmp_ln52_fu_264_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_116 <= add_ln52_fu_270_p2;
            end if; 
        end if;
    end process;

    longSum_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                longSum_fu_112 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                longSum_fu_112 <= grp_fu_247_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln52_fu_270_p2 <= std_logic_vector(unsigned(i_fu_116) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln52_fu_264_p2)
    begin
        if (((icmp_ln52_fu_264_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_longSum_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, longSum_fu_112, grp_fu_247_p2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_longSum_load <= grp_fu_247_p2;
        else 
            ap_sig_allocacmp_longSum_load <= longSum_fu_112;
        end if; 
    end process;

    icmp_ln52_fu_264_p2 <= "1" when (i_fu_116 = ap_const_lv5_14) else "0";
    longSum_out <= longSum_fu_112;

    longSum_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln52_fu_264_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln52_fu_264_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            longSum_out_ap_vld <= ap_const_logic_1;
        else 
            longSum_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_280_p41 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
end behav;
