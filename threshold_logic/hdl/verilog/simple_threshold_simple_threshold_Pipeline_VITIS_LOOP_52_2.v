// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_52_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        updateMovingAverages_float_float_float_int_longTermPrices_load,
        updateMovingAverages_float_float_float_int_longTermPrices_5_load,
        updateMovingAverages_float_float_float_int_longTermPrices_6_load,
        updateMovingAverages_float_float_float_int_longTermPrices_7_load,
        updateMovingAverages_float_float_float_int_longTermPrices_8_load,
        updateMovingAverages_float_float_float_int_longTermPrices_9_load,
        updateMovingAverages_float_float_float_int_longTermPrices_10_load,
        updateMovingAverages_float_float_float_int_longTermPrices_11_load,
        updateMovingAverages_float_float_float_int_longTermPrices_12_load,
        updateMovingAverages_float_float_float_int_longTermPrices_13_load,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load,
        updateMovingAverages_float_float_float_int_longTermPrices_6,
        updateMovingAverages_float_float_float_int_longTermPrices_7,
        updateMovingAverages_float_float_float_int_longTermPrices_8,
        updateMovingAverages_float_float_float_int_longTermPrices_9,
        updateMovingAverages_float_float_float_int_longTermPrices,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load,
        p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load,
        longSum_out,
        longSum_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_5_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_6_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_7_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_8_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_9_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_10_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_11_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_12_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_13_load;
input  [31:0] p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_6;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_7;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_8;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices_9;
input  [31:0] updateMovingAverages_float_float_float_int_longTermPrices;
input  [31:0] p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load;
input  [31:0] p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load;
input  [31:0] p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load;
input  [31:0] p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load;
output  [31:0] longSum_out;
output   longSum_out_ap_vld;

reg ap_idle;
reg longSum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln52_fu_264_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_2_fu_280_p43;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [31:0] longSum_fu_112;
wire   [31:0] grp_fu_247_p2;
reg   [31:0] ap_sig_allocacmp_longSum_load;
wire    ap_block_pp0_stage1;
wire    ap_loop_init;
reg   [4:0] i_fu_116;
wire   [4:0] add_ln52_fu_270_p2;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_2_fu_280_p41;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [4:0] tmp_2_fu_280_p1;
wire   [4:0] tmp_2_fu_280_p3;
wire   [4:0] tmp_2_fu_280_p5;
wire   [4:0] tmp_2_fu_280_p7;
wire   [4:0] tmp_2_fu_280_p9;
wire   [4:0] tmp_2_fu_280_p11;
wire   [4:0] tmp_2_fu_280_p13;
wire   [4:0] tmp_2_fu_280_p15;
wire   [4:0] tmp_2_fu_280_p17;
wire   [4:0] tmp_2_fu_280_p19;
wire   [4:0] tmp_2_fu_280_p21;
wire   [4:0] tmp_2_fu_280_p23;
wire   [4:0] tmp_2_fu_280_p25;
wire   [4:0] tmp_2_fu_280_p27;
wire   [4:0] tmp_2_fu_280_p29;
wire   [4:0] tmp_2_fu_280_p31;
wire  signed [4:0] tmp_2_fu_280_p33;
wire  signed [4:0] tmp_2_fu_280_p35;
wire  signed [4:0] tmp_2_fu_280_p37;
wire  signed [4:0] tmp_2_fu_280_p39;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 longSum_fu_112 = 32'd0;
#0 i_fu_116 = 5'd0;
#0 ap_done_reg = 1'b0;
end

simple_threshold_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_longSum_load),
    .din1(tmp_2_fu_280_p43),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

simple_threshold_sparsemux_41_5_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 32 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 32 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 32 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 32 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 32 ),
    .CASE10( 5'hA ),
    .din10_WIDTH( 32 ),
    .CASE11( 5'hB ),
    .din11_WIDTH( 32 ),
    .CASE12( 5'hC ),
    .din12_WIDTH( 32 ),
    .CASE13( 5'hD ),
    .din13_WIDTH( 32 ),
    .CASE14( 5'hE ),
    .din14_WIDTH( 32 ),
    .CASE15( 5'hF ),
    .din15_WIDTH( 32 ),
    .CASE16( 5'h10 ),
    .din16_WIDTH( 32 ),
    .CASE17( 5'h11 ),
    .din17_WIDTH( 32 ),
    .CASE18( 5'h12 ),
    .din18_WIDTH( 32 ),
    .CASE19( 5'h13 ),
    .din19_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
sparsemux_41_5_32_1_1_U11(
    .din0(updateMovingAverages_float_float_float_int_longTermPrices_load),
    .din1(updateMovingAverages_float_float_float_int_longTermPrices_5_load),
    .din2(updateMovingAverages_float_float_float_int_longTermPrices_6_load),
    .din3(updateMovingAverages_float_float_float_int_longTermPrices_7_load),
    .din4(updateMovingAverages_float_float_float_int_longTermPrices_8_load),
    .din5(updateMovingAverages_float_float_float_int_longTermPrices_9_load),
    .din6(updateMovingAverages_float_float_float_int_longTermPrices_10_load),
    .din7(updateMovingAverages_float_float_float_int_longTermPrices_11_load),
    .din8(updateMovingAverages_float_float_float_int_longTermPrices_12_load),
    .din9(updateMovingAverages_float_float_float_int_longTermPrices_13_load),
    .din10(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_10_load),
    .din11(updateMovingAverages_float_float_float_int_longTermPrices_6),
    .din12(updateMovingAverages_float_float_float_int_longTermPrices_7),
    .din13(updateMovingAverages_float_float_float_int_longTermPrices_8),
    .din14(updateMovingAverages_float_float_float_int_longTermPrices_9),
    .din15(updateMovingAverages_float_float_float_int_longTermPrices),
    .din16(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_16_load),
    .din17(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_17_load),
    .din18(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_18_load),
    .din19(p_ZZ20updateMovingAveragesfRfS_RiE14longTermPrices_19_load),
    .def(tmp_2_fu_280_p41),
    .sel(i_fu_116),
    .dout(tmp_2_fu_280_p43)
);

simple_threshold_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_116 <= 5'd0;
    end else if (((icmp_ln52_fu_264_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_116 <= add_ln52_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        longSum_fu_112 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        longSum_fu_112 <= grp_fu_247_p2;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_264_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_longSum_load = grp_fu_247_p2;
    end else begin
        ap_sig_allocacmp_longSum_load = longSum_fu_112;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_264_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        longSum_out_ap_vld = 1'b1;
    end else begin
        longSum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_270_p2 = (i_fu_116 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln52_fu_264_p2 = ((i_fu_116 == 5'd20) ? 1'b1 : 1'b0);

assign longSum_out = longSum_fu_112;

assign tmp_2_fu_280_p41 = 'bx;

endmodule //simple_threshold_simple_threshold_Pipeline_VITIS_LOOP_52_2
